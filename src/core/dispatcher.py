from src.core.event import BarEvent, OrderEvent, FillEvent
from src.logging.logger_provider import get_logger

logger = get_logger(__name__, "DEBUG")

class Dispatcher:

    """
    Events:
        - new_bar : new bar from DataManager
        - strategy_order : order generated by the Strategy logic 
    """

    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(Dispatcher, cls).__new__(cls)
            cls._instance.subscribers = {}
        return cls._instance
    
    def subscribe(self, event_type, callback):
     
        if event_type not in self.subscribers:
            self.subscribers[event_type] = []
        self.subscribers[event_type].append(callback)

    def publish(self, event_type, sender, data=None):
        logger.debug(f"Published: {event_type} event, sender {sender.__class__.__name__}, data {data}")
        if event_type in self.subscribers:
            for callback in self.subscribers[event_type]:
                callback(sender, data)